# üìö Comic Book Web API ‚Äì Project Checklist (Updated)

---

## ‚úÖ Phase 1: Core API Functionality
- [x] Design SQL Server schema with realistic comic book data
- [x] Insert sample data (Spider-Man, creators, events, etc.)
- [x] Set up .NET 8 Web API project with Swagger
- [x] Add EF Core packages via NuGet
- [x] Add connection string to appsettings.json
- [x] Manually create EF Core entity classes
- [x] Create ComicDbContext.cs and register in Program.cs
- [x] Build ComicsController (manual CRUD using EF Core)
- [x] Build CharactersController
- [x] Build SeriesController
- [x] Build CreatorsController
- [x] Build EventsController
- [x] Build StoriesController

---

## üßº Phase 2: Clean API Architecture (DTOs + Validation)
- [ ] Create DTOs for main entities (ComicDTO, CharacterDTO, etc.)
- [ ] Use AutoMapper to map models to DTOs
- [ ] Add validation attributes (e.g., [Required], [MaxLength])
- [ ] Add error handling (404, 400, etc.)
- [ ] Return shaped, clean data instead of full entity models

---

## üîê Phase 3: Secure the API (JWT + Roles)
- [ ] Install JWT Auth packages
- [ ] Add JWT configuration to appsettings.json
- [ ] Create JwtTokenService to generate tokens
- [ ] Add AuthController with login endpoint
- [ ] Register JWT auth in Program.cs
- [ ] Protect selected routes with [Authorize]
- [ ] Add role-based authorization (e.g., Admin, Editor)
- [ ] Enable Swagger JWT bearer token input

---

## ‚ö° Phase 4: Performance Improvements
- [ ] Add pagination to GET endpoints
- [ ] Add caching (MemoryCache or ResponseCache)
- [ ] Ensure all endpoints are asynchronous

---

## üöÄ Phase 5: Deployment
- [ ] Add Docker support
- [ ] Deploy to Azure / Kestrel / IIS
- [ ] Add CI/CD pipeline (e.g., GitHub Actions)

---

## ‚ö†Ô∏è NuGet + Swagger Version Compatibility
- Swashbuckle.AspNetCore v8+ may cause Swagger UI rendering issues
- Recommended version: **6.6.2** for dev testing
- If using v8+, add full SwaggerDoc metadata manually to avoid:
  `"Unable to render this definition..."` error